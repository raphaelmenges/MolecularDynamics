//============================================================================
// Distributed under the MIT License. Author: Raphael Menges
//============================================================================

#version 430 core

// ## Workgroup layout
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

// ## Constant values
const int neighborsMaxCount = 200;

// ## Defines
#define GRID_UNDEF 4294967295

// ## Global variables

// All cutting faces, also those who gets cut away by others
int cuttingFaceCount = 0;
vec4 cuttingFaces[neighborsMaxCount];
vec3 cuttingFaceCenters[neighborsMaxCount];

// Selection of cutting faces which get intersected pairwaise and produce endpoints
int cuttingFaceIndicators[neighborsMaxCount]; // Indicator whether cutting face was cut away by other (1 == not cut away)
int cuttingFaceIndicesCount = 0; // Count of not cut away cutting faces
int cuttingFaceIndices[neighborsMaxCount]; // Indices of cutting faces which are not cut away by other

// ## Uniforms
uniform int inputCount;
uniform float probeRadius;
uniform int numberOfSearchCells;
uniform int startCellOffset;
uniform int searchCellOffsets[216];

// ## SSBOs

// Radii
layout(std430, binding = 0) restrict readonly buffer RadiiBuffer { float radii[]; };

// ## Atomic counter for indices in image buffers
layout(binding = 1) uniform atomic_uint InternalCount;
layout(binding = 2) uniform atomic_uint SurfaceCount;

// ## Image buffer with input indices
layout(binding = 3, r32ui) restrict readonly uniform uimageBuffer InputIndices;

// ## Image buffers with output indices of internal and surface atoms
layout(binding = 4, r32ui) restrict writeonly uniform uimageBuffer InternalIndices;
layout(binding = 5, r32ui) restrict writeonly uniform uimageBuffer SurfaceIndices;

// ## Neighbor hood search buffers
layout(std430, binding = 6)  restrict readonly buffer PositionsBuffer           { vec4 positions[]; };
layout(std430, binding = 7)  restrict readonly buffer ParticleCellsBuffer       { uint pcell[]; };
layout(std430, binding = 8)  restrict readonly buffer ParticleCellIndicesBuffer { uint gndx[]; };
layout(std430, binding = 9)  restrict readonly buffer GridCellCountBuffer       { int  gridCellCnt[]; };
layout(std430, binding = 10) restrict readonly buffer GridCellOffsetBuffer      { int  gridCellOff[]; };
layout(std430, binding = 11) restrict readonly buffer GridBuffer                { uint grid[]; };
layout(std430, binding = 12) restrict readonly buffer OriginalIndexBuffer       { uint ondx[]; };

// ## Save as internal
void saveAsInternal(int atomIndex)
{
    // Increment atomic counter
    uint idx = atomicCounterIncrement(InternalCount);

    // Save index of atom at index of atomic counter in image
    imageStore(InternalIndices, int(idx), uvec4(atomIndex));
}

// ## Save as surface
void saveAsSurface(int atomIndex)
{
    // Increment atomic counter
    uint idx = atomicCounterIncrement(SurfaceCount);

    // Save index of atom at index of atomic counter in image
    imageStore(SurfaceIndices, int(idx), uvec4(atomIndex));
}

// ## Check for parallelism
bool checkParallelism(
    vec4 plane,
    vec4 otherPlane)
{
    return (1.0 <= abs(dot(plane.xyz, otherPlane.xyz)));
}

// ## Determines whether point lies in halfspace of plane direction
// http://stackoverflow.com/questions/15688232/check-which-side-of-a-plane-points-are-on
bool pointInHalfspaceOfPlane(
    vec4 plane,
    vec3 point)
{
    // Use negative distance of plane
    return 0 < dot(plane, vec4(point, -1));
}

// ## Intersection line of two planes
// http://stackoverflow.com/questions/6408670/line-of-intersection-between-two-planes
void intersectPlanes(
    vec4 plane,
    vec4 otherPlane,
    inout vec3 linePoint,
    inout vec3 lineDir)
{
    // Direction of line
    lineDir = cross(plane.xyz, otherPlane.xyz);

    // Determinant (should no be zero since no parallel planes tested)
    float determinant = length(lineDir);
    determinant = determinant * determinant;

    // Point on line
    linePoint =
        (cross(lineDir, otherPlane.xyz) * -plane.w
        + (cross(plane.xyz, lineDir) * -otherPlane.w))
        / determinant;

    // Normalize direction of line
    lineDir = normalize(lineDir);
}

// ## Part under square root of intersection line and sphere
// https://en.wikipedia.org/wiki/Line%E2%80%93sphere_intersection
float underSQRT(
    vec3 linePoint,
    vec3 lineDir,
    vec3 sphereCenter,
    float sphereRadius)
{
    float underSQRT1 = dot(lineDir, (linePoint - sphereCenter));
    underSQRT1 = underSQRT1 * underSQRT1;
    float underSQRT2 = length(linePoint - sphereCenter);
    underSQRT2 = underSQRT2 * underSQRT2;
    return (underSQRT1 - underSQRT2 + (sphereRadius * sphereRadius));
}

// ## Function to test whether endpoint is NOT cut away. Called after cutting face list is minimized
bool testEndpoint(vec3 endpoint, int excludeA, int excludeB)
{
    // Iterate over cuttingFaceIndices entries
    for(int i = 0; i < cuttingFaceIndicesCount; i++)
    {
        // Index of cutting face
        int index = cuttingFaceIndices[i];

        // Do not test against faces which created endpoint
        if(index == excludeA || index == excludeB) { continue; }

        // Test whether endpoint is in halfspace of cut away part
        if(pointInHalfspaceOfPlane(
            cuttingFaces[index],
            endpoint))
        {
            return false;
        }
    }
    return true;
}

// ## Main function
void main()
{
    // Index
    int inputIndicesIndex = int(gl_GlobalInvocationID.x);

    // Check whether in range
    if(inputIndicesIndex >= inputCount) { return; }

    // Extract index of atom in AtomBuffer
    int atomIndex = int(imageLoad(InputIndices, inputIndicesIndex));

    // When no endpoint was generated at all, atom is surface (value is false then)
    bool endpointGenerated = false;

    // When one endpoint survives cutting, atom is surface (value is true then)
    bool endpointSurvivesCut = false;

    // ### ATOM VALUES ###

    // Own center
    vec3 atomCenter = positions[atomIndex].xyz;

    // Own extended radius
    float atomExtRadius = radii[atomIndex] + probeRadius;

    // ### BUILD UP OF CUTTING FACE LIST ###

    // Get sorted index of atom
    uint sortedIndex = grid[atomIndex];

    // Get cell for atom by sorted index
    uint cell = pcell[sortedIndex];
    if (cell == GRID_UNDEF) return; // particle is outside of grid

    // Go over cells to search for neighbors
    uint startCell = cell - startCellOffset;
    for (int cellIndex = 0; cellIndex < numberOfSearchCells; cellIndex++)
    {
        // Extract current cell
        uint currentCell = startCell + searchCellOffsets[cellIndex];

        // Proceed only if cell contains particles
        if (gridCellCnt[currentCell] != 0)
        {
            // Get first and last particle index
            uint firstParticle = gridCellOff[currentCell];
            uint lastParticle  = firstParticle + gridCellCnt[currentCell];

            // Iterate over all particles inside cell
            for (uint pIndex = firstParticle; pIndex < lastParticle; pIndex++)
            {
                // ### FETCHING VALUES ###

                // Get the original index for the current particle
                uint otherAtomIndex = ondx[pIndex];

                // TODO: continue loop if index is not valid for this computation run

                // Fetch position of other atom
                vec3 otherAtomCenter = positions[otherAtomIndex].xyz;

                // Vector from center to other's
                vec3 connection = otherAtomCenter - atomCenter;

                // Distance between both
                float atomsDistance = length(connection);

                // Extended radius of other atom
                float otherAtomExtRadius = radii[otherAtomIndex] + probeRadius;

                // Test atoms are either too far away or just touch each other (then continue)
                if(atomsDistance >= (atomExtRadius + otherAtomExtRadius)) { continue; }

                // Test atoms are either too far away (then continue)
                // if(atomsDistance > (atomExtRadius + otherAtomExtRadius)) { continue; }

                // Test whether atom is completely covering other
                if(atomExtRadius >= (otherAtomExtRadius + atomsDistance)) { continue; }

                // Test whether atom is completely covered by other
                if((atomExtRadius + atomsDistance) <= otherAtomExtRadius)
                {
                    // Since it is completely covered, it is internal
                    saveAsInternal(atomIndex); return;
                }

                // ### INTERSECTION WITH OTHER ATOMS ###

                // Calculate center of intersection
                // http://gamedev.stackexchange.com/questions/75756/sphere-sphere-intersection-and-circle-sphere-intersection
                float h =
                    0.5
                    + ((atomExtRadius * atomExtRadius)
                    - (otherAtomExtRadius * otherAtomExtRadius))
                    / (2.0 * (atomsDistance * atomsDistance));

                // ### CUTTING FACE LIST ###

                // Save center of face
                vec3 faceCenter = atomCenter + (h * connection);
                cuttingFaceCenters[cuttingFaceCount] = faceCenter;

                // Save plane equation of face
                vec3 faceNormal = normalize(connection);
                float faceDistance = dot(faceCenter, faceNormal);
                cuttingFaces[cuttingFaceCount] = vec4(faceNormal, faceDistance);

                // Initialize cutting face indicator with: 1 == was not cut away (yet)
                cuttingFaceIndicators[cuttingFaceCount] = 1;

                // Increment cutting face list index and break if max count of neighbors reached
                cuttingFaceCount++;
                if(cuttingFaceCount == neighborsMaxCount) { break; }
            }
        }
    }

    // ### OPTIMIZE CUTTING FACE LIST ###

    for(int i = 0; i < cuttingFaceCount - 1; i++)
    {
        // Already cut away
        if(cuttingFaceIndicators[i] == 0) { continue; }

        // Values of cutting face
        vec4 face = cuttingFaces[i];
        vec3 faceCenter = cuttingFaceCenters[i];

        // Test every cutting face for intersection line with other
        for(int j = i+1; j < cuttingFaceCount; j++)
        {
            // Already cut away
            if(cuttingFaceIndicators[j] == 0) { continue; }

            // Values of other cutting face
            vec4 otherFace = cuttingFaces[j];
            vec3 otherFaceCenter = cuttingFaceCenters[j];

            // Check for parallelism, first
            bool notCutEachOther = checkParallelism(face, otherFace); // If already parallel, they do not cut

            // Do further checking when not parallel
            if(!notCutEachOther)
            {
                // Intersection of planes, resulting in line
                vec3 linePoint; vec3 lineDir;
                intersectPlanes(
                    face,
                    otherFace,
                    linePoint,
                    lineDir);

                // Intersection of line with sphere, resulting in two, one or no endpoints
                // https://en.wikipedia.org/wiki/Line%E2%80%93sphere_intersection
                float valueUnderSQRT = underSQRT(linePoint, lineDir, atomCenter, atomExtRadius);

                // Only interesting case is for zero endpoints, because then there is no cut on atom's sphere
                notCutEachOther = (valueUnderSQRT < 0);
            }

            // ### CHECK WHETHER CUTTING FACE CAN BE FORGOTTEN ###

            // Faces do not cut each other on sphere, so they produce not later endpoints. Check them now
            if(notCutEachOther)
            {
                // Connection between faces' center (vector from face to other face)
                vec3 connection = otherFaceCenter - faceCenter;

                // Test point
                vec3 testPoint = faceCenter + 0.5 * connection;

                if((dot(face.xyz, connection) > 0) == (dot(otherFace.xyz, connection) > 0))
                {
                    // Inclusion
                    if(pointInHalfspaceOfPlane(face, testPoint))
                    {
                        cuttingFaceIndicators[j] = 0;
                    }
                    else
                    {
                        cuttingFaceIndicators[i] = 0;
                    }
                }
                else
                {
                    // Maybe complete atom is cut away
                    if(pointInHalfspaceOfPlane(face, testPoint))
                    {
                        saveAsInternal(atomIndex); return;
                    }
                }
            }
        }
    }

    // ### GO OVER CUTTING FACES AND COLLECT NOT CUT AWAY ONES ###

    for(int i = 0; i < cuttingFaceCount; i++)
    {
        // Check whether cutting face is still there after preprocessing
        if(cuttingFaceIndicators[i] == 1)
        {
            // Save index of that cutting face
            cuttingFaceIndices[cuttingFaceIndicesCount] = i;

            // Increase count of those cutting faces
            cuttingFaceIndicesCount++;
        }
    }

    // ### GO OVER MINIMIZED CUTTING FACE LIST AND TEST ENDPOINTS ###

    for(int i = 0; i < cuttingFaceIndicesCount; i++)
    {
        // Values of cutting face
        int index = cuttingFaceIndices[i];
        vec4 face = cuttingFaces[index];

        // Test every cutting face for intersection line with other
        for(int j = i+1; j < cuttingFaceIndicesCount; j++)
        {
            // Values of other cutting face
            int otherIndex = cuttingFaceIndices[j];
            vec4 otherFace = cuttingFaces[otherIndex];

            // Check for parallelism
            if(checkParallelism(face, otherFace)) { continue; }

            // Intersection of faces, resulting in line
            vec3 lineDir; vec3 linePoint;
            intersectPlanes(
                face,
                otherFace,
                linePoint,
                lineDir);

            // Intersection of line with sphere, resulting in two, one or no endpoints
            // https://en.wikipedia.org/wiki/Line%E2%80%93sphere_intersection
            float valueUnderSQRT = underSQRT(linePoint, lineDir, atomCenter, atomExtRadius);

            // Left part of equation
            float left = -(dot(lineDir, (linePoint - atomCenter)));

            // Check value under square root
            if(valueUnderSQRT > 0)
            {
                // Some endpoint was generated, at least
                endpointGenerated = true;

                // Right part of equation
                float right = sqrt(valueUnderSQRT);

                // First endpoint
                float d = left + right;
                if(testEndpoint(linePoint + (d * lineDir), index, otherIndex))
                {
                    // Break out of for loop (and outer)
                    endpointSurvivesCut = true;
                    break;
                }

                // Second endpoint
                d = left - right;
                if(testEndpoint(linePoint + (d * lineDir), index, otherIndex))
                {
                    // Break out of for loop (and outer)
                    endpointSurvivesCut = true;
                    break;
                }
            }
            else if(valueUnderSQRT == 0)
            {
                // Some endpoint was generated, at least generated
                endpointGenerated = true;

                // Just test the one endpoint
                float d = left;
                if(testEndpoint(linePoint + (d * lineDir), index, otherIndex))
                {
                    // Break out of for loop (and outer)
                    endpointSurvivesCut = true;
                    break;
                }
            }
            // else, no endpoint is generated since cutting faces do not intersect
        }

        if(endpointSurvivesCut) { break; }
    }

    // ### ATOM IS SURFACE ATOM ###

    // If no endpoint was generated at all or one or more survived cutting, add this atom to surface
    if(!endpointGenerated || endpointSurvivesCut)
    {
        saveAsSurface(atomIndex);
    }
    else
    {
        saveAsInternal(atomIndex);
    }
}
